def get_count_char(str_):
    letters = str_.lower() 
    dictionary = {} 
    for i in letters:  
        if i.isalpha():  
            if i in dictionary.keys():  
                count = dictionary[i]  
                count += 1  
                dictionary[i] = count  
            else:  
                dictionary[i] = 1  
    return dictionary 


def get_percent_correlation(str_):
    cor = get_count_char(str_) 
    summary = sum(cor.values()) 
    for key in cor: 
        cor[key] /= summary 
        cor[key] *= 100 
        cor[key] = round(cor[key]) 
    return cor 


main_str = """
        Данное предложение будет разбиваться на отдельные слова. 
        В качестве разделителя для встроенного метода split будет выбран символ пробела. На выходе мы получим список 
        отдельных слов. 
        Далее нужно отсортировать слова в алфавитном порядке, а после сортировки склеить их с помощью метода строк join.
        Приступим!!!!
    """

print(get_count_char(main_str))  # Вывод словаря "Буква" - "Количество"
# print(get_percent_correlation(main_str))  # Вывод словаря "Буква" - "Процентное соотношение (данная буква/все буквы)"

"""
Комментарии:
В целом, всё круто и твой код работает верно.
Круто, что используешь выражения в духе  for i in letters, а не letters.keys(), а еще здорово, что написал функцию
для подсчета процентного соотношения, так же хочется похвалить за хорошее форматирование кода.

Но есть несколько моментов, которые можно улучшить:
    1. Следует избегать названий переменных и аргументов, которые сильно похоже на внутренние переменные или типы питона
       Так название аргумента str_ не дает никакой информации, но очень похоже на питоновский str().
       Может быть заменить такие переменные на что-то более информативное? :)
    2. Для читаемости кода  можно добавить докстринги и подсказки типов.
       Почитать о докстрингах можно тут https://habr.com/ru/articles/499358/
       А о тайп хинтах тут https://habr.com/ru/companies/lamoda/articles/432656
       Или прямо в пепе https://peps.python.org/pep-0484/
    3. Мелочь, но солидную часть кода в get_count_char можно заменить выражением вида 
Дополнительно:
Если бы эту задачу пришлось решать на работе, то скорее всего использовались бы готовые структуры из модуля collections.
Если тебе хочется устроть себе небольшой челлендж, то можно попробовать написать решение этой задачи в несколько строк кода,
используя list и dict comprehensions, https://pyneng.readthedocs.io/ru/latest/book/08_useful_basics/x_comprehensions.html
"""
